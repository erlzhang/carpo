.mt-4.container
  .mb-4.card.border-light
    .card-body
      %h2.card-title Title
      .text-secondary.card-text
        %p We support many different languages and platforms - check out some examples below!
        %p A Ruby static code analyzer, based on the community Ruby style guide.
      %p
        = link_to nil, :class => "btn btn-secondary mr-3" do
          New One
        = link_to nil, :class => "btn btn-secondary" do
          New Two
  .card
    .card-header
      %ul.nav.nav-tabs.card-header-tabs.sortable-head
        %li.nav-item
          = link_to nil, :class => "nav-link active" do
            First
        %li.nav-item
          = link_to nil, :class => "nav-link" do
            Second
        %li.nav-item
          = link_to nil, :class => "nav-link" do
            Third
        %li.nav-item
          = link_to nil, :class => "nav-link" do
            Fourth
        %li.nav-item
          = link_to nil, :class => "nav-link" do
            Fifth
    .card-body
      %h4.card-title First Title
      %p.card-text.text-muted This method enables you to use the flash as a central messaging system in your app. 
      %ul.list-group.sortable-list
        - (1..10).each do |i|
          %li.list-group-item
            %h5
              List Title #{i}
            .row
              .col-md-8
                %p.text-muted Access the contents of the flash. Use flash["notice"] to read a notice you put there or flash["notice"] = "hello" to put a new one. 
              .col-md-4.text-center
                = link_to nil, :class => "btn btn-primary btn-sm mr-1" do
                  Preview
                = link_to nil, :class => "btn btn-warning btn-sm mr-1" do
                  Edit
                = link_to nil, :class => "btn btn-danger btn-sm" do
                  Delete
